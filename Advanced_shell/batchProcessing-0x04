#!/bin/bash

OUTPUT_DIR="pokemon_data"
ERROR_LOG="errors.txt"
TIMEOUT=10  # Optional: Kill process if it runs longer
mkdir -p "$OUTPUT_DIR"
> "$ERROR_LOG"

POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Function to fetch Pokémon
fetch_pokemon() {
  local NAME=$1
  local API_URL="https://pokeapi.co/api/v2/pokemon/$NAME"
  local OUTPUT_FILE="$OUTPUT_DIR/${NAME}.json"

  echo "Fetching data for $NAME..."
  if curl -s -f "$API_URL" -o "$OUTPUT_FILE"; then
    echo "Saved data to $OUTPUT_FILE ✅"
  else
    echo "Failed to fetch data for $NAME ❌" >> "$ERROR_LOG"
  fi
}

# Start each fetch in background
for NAME in "${POKEMON_LIST[@]}"; do
  fetch_pokemon "$NAME" &
done

# Capture all job PIDs
JOB_PIDS=($(jobs -p))

# Monitor and optionally kill long-running jobs
for PID in "${JOB_PIDS[@]}"; do
  ( 
    sleep "$TIMEOUT"
    if kill -0 "$PID" 2>/dev/null; then
      echo "Killing job $PID due to timeout..." | tee -a "$ERROR_LOG"
      kill -9 "$PID"
    fi
  ) &
done

# Wait for all original jobs to finish
wait

echo "All jobs completed or were killed. Check '$ERROR_LOG' if needed."
